include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
create table test(a int, b int, c int) engine=innodb;
create table staging(a int, b int, c int) engine=innodb;
insert into staging values (1, 1, 1), (2, 2, 2), (3, 3, 3);
insert into staging values (4, 4, 4), (5, 5, 5), (6, 6, 6);
insert into staging values (7, 7, 7), (8, 8, 8), (9, 9, 9);
insert into staging values (10, 10, 10), (11, 11, 11), (12, 12, 12);
insert into staging values (13, 13, 13), (14, 14, 14), (15, 15, 15);
Set CPU limit for milliseconds to 1
set @@GLOBAL.write_cpu_limit_milliseconds=1;
Test 1: Single Statement Tests
connect to master
Test 1.1: Insert Query
setting dbug.force_long_running_query which will
make the query long running after processing number
of rows determined by write_time_check_batch
set @@global.debug= '+d,dbug.force_long_running_query';
Set the batch size for checking CPU time to 3
set @@GLOBAL.write_time_check_batch=3;
Test 1.1.1: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
insert into test values(1, 1, 1);
insert into test values(2, 2, 2), (3, 3, 3);
this query raises warning
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
show warnings;
Level	Code	Message
Note	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Test 1.1.2: Raise warning
set @@GLOBAL.write_control_level=WARN;
insert into test values(1, 1, 1);
insert into test values(2, 2, 2), (3, 3, 3);
this query raises warning
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
show warnings;
Level	Code	Message
Warning	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Reset table test
set @@GLOBAL.write_control_level=OFF;
delete from test;
Test 1.1.3: Raise error
set @@GLOBAL.write_control_level=ERROR;
insert into test values(1, 1, 1);
insert into test values(2, 2, 2), (3, 3, 3);
this query fails with an error
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
1
set @@GLOBAL.write_control_level=OFF;
verify that the last statement failed
select * from test;
a	b	c
1	1	1
2	2	2
3	3	3
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
Set the batch size for checking CPU time to 5
set @@GLOBAL.write_time_check_batch=5;
Test 1.1.4: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
insert into test values(1, 1, 1);
insert into test values(2, 2, 2), (3, 3, 3);
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
this query raises warning
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
show warnings;
Level	Code	Message
Note	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Test 1.1.5: Raise warning
set @@GLOBAL.write_control_level=WARN;
insert into test values(1, 1, 1);
insert into test values(2, 2, 2), (3, 3, 3);
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
this query raises warning
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
show warnings;
Level	Code	Message
Warning	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Reset table test
set @@GLOBAL.write_control_level=OFF;
delete from test;
Test 1.1.6: Raise error
set @@GLOBAL.write_control_level=ERROR;
insert into test values(1, 1, 1);
insert into test values(2, 2, 2), (3, 3, 3);
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
this query fails with an error
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
2
verify that the last statement failed
select * from test;
a	b	c
1	1	1
2	2	2
3	3	3
4	4	4
5	5	5
6	6	6
7	7	7
8	8	8
9	9	9
10	10	10
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
set @@global.debug= '-d,dbug.force_long_running_query';
set @@GLOBAL.write_control_level=OFF;
connect to master
Test 1.2: Update Query
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
setting dbug.force_long_running_query which will
make the query long running after processing number
of rows determined by write_time_check_batch
set @@global.debug= '+d,dbug.force_long_running_query';
Set the batch size for checking CPU time to 3
set @@GLOBAL.write_time_check_batch=3;
Test 1.2.1: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
update test set b=-1 where a <= 1;
update test set b=-2 where a <= 2;
this query raises warning
update test set b=-3 where a <= 3;
show warnings;
Level	Code	Message
Note	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Test 1.2.2: Raise warning
set @@GLOBAL.write_control_level=WARN;
update test set b=-11 where a <= 1;
update test set b=-12 where a <= 2;
this query raises warning
update test set b=-13 where a <= 3;
show warnings;
Level	Code	Message
Warning	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Test 1.2.3: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
0
update test set b=-21 where a <= 1;
update test set b=-22 where a <= 2;
this query fails with an error
update test set b=-23 where a <= 3;
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
3
verify that the last statement failed
select * from test;
a	b	c
1	-22	1
2	-22	2
3	-13	3
4	4	4
5	5	5
6	6	6
7	7	7
8	8	8
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
Set the batch size for checking CPU time to 5
set @@GLOBAL.write_time_check_batch=5;
Test 1.2.4: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
update test set b=-31 where a <= 1;
update test set b=-32 where a <= 2;
update test set b=-33 where a <= 3;
update test set b=-34 where a <= 4;
this query raises warning
update test set b=-35 where a <= 5;
show warnings;
Level	Code	Message
Note	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Test 1.2.5: Raise warning
set @@GLOBAL.write_control_level=WARN;
update test set b=-41 where a <= 1;
update test set b=-42 where a <= 2;
update test set b=-43 where a <= 3;
update test set b=-44 where a <= 4;
this query raises warning
update test set b=-45 where a <= 5;
show warnings;
Level	Code	Message
Warning	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Test 1.2.6: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
update test set b=-51 where a <= 1;
update test set b=-52 where a <= 2;
update test set b=-53 where a <= 3;
update test set b=-54 where a <= 4;
this query fails with an error
update test set b=-55 where a <= 5;
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
4
verify that the last statement failed
select * from test;
a	b	c
1	-54	1
2	-54	2
3	-54	3
4	-54	4
5	-45	5
6	6	6
7	7	7
8	8	8
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
set @@global.debug= '-d,dbug.force_long_running_query';
connect to master
Test 1.3: Delete Query
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
setting dbug.force_long_running_query which will
make the query long running after processing number
of rows determined by write_time_check_batch
set @@global.debug= '+d,dbug.force_long_running_query';
Set the batch size for checking CPU time to 3
set @@GLOBAL.write_time_check_batch=3;
Test 1.3.1: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
delete from test where a = 1;
delete from test where a in (2, 3);
this query raises warning
delete from test where a in (4, 5, 6);
show warnings;
Level	Code	Message
Note	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 1.3.2: Raise warning
set @@GLOBAL.write_control_level=WARN;
delete from test where a = 1;
delete from test where a in (2, 3);
this query raises warning
delete from test where a in (4, 5, 6);
show warnings;
Level	Code	Message
Warning	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 1.3.3: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
delete from test where a = 1;
delete from test where a in (2, 3);
this query fails with an error
delete from test where a in (4, 5, 6);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
5
verify that the last statement failed
select * from test;
a	b	c
4	4	4
5	5	5
6	6	6
7	7	7
8	8	8
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Set the batch size for checking CPU time to 5
set @@GLOBAL.write_time_check_batch=5;
Test 1.3.4: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
delete from test where a = 1;
delete from test where a in (2, 3);
delete from test where a in (4, 5, 6);
delete from test where a in (7, 8, 9, 10);
this query raises warning
delete from test where a in (11, 12, 13, 14, 15);
show warnings;
Level	Code	Message
Note	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 1.3.5: Raise warning
set @@GLOBAL.write_control_level=WARN;
delete from test where a = 1;
delete from test where a in (2, 3);
delete from test where a in (4, 5, 6);
delete from test where a in (7, 8, 9, 10);
this query raises warning
delete from test where a in (11, 12, 13, 14, 15);
show warnings;
Level	Code	Message
Warning	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 1.3.6: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
delete from test where a = 1;
delete from test where a in (2, 3);
delete from test where a in (4, 5, 6);
delete from test where a in (7, 8, 9, 10);
this query fails with an error
delete from test where a in (11, 12, 13, 14, 15);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
6
verify that the last statement failed
select * from test;
a	b	c
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
set @@global.debug= '-d,dbug.force_long_running_query';
Test 2: Multi-Statement Tests
connect to master
Test 2.1: Insert Query - Multi-statement
setting dbug.force_long_running_query which will
make the query long running after processing number
of rows determined by write_time_check_batch
set @@global.debug= '+d,dbug.force_long_running_query';
Set the batch size for checking CPU time to 3
set @@GLOBAL.write_time_check_batch=3;
Test 2.1.1: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
select 1;
insert into test values(1, 1, 1);
select 2;
insert into test values(2, 2, 2), (3, 3, 3);
select 3;
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
select 4;
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
select 5;
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
select 6;
||||
1
1
2
2
3
3
4
4
5
5
6
6
show warnings;
Level	Code	Message
Test 2.1.2: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
select 1;
insert into test values(1, 1, 1);
select 2;
insert into test values(2, 2, 2), (3, 3, 3);
select 3;
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
select 4;
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
select 5;
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
select 6;
||||
1
1
2
2
3
3
4
4
5
5
6
6
show warnings;
Level	Code	Message
Reset table test
set @@GLOBAL.write_control_level=OFF;
delete from test;
Test 2.1.3: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
select 1;
insert into test values(1, 1, 1);
select 2;
insert into test values(2, 2, 2), (3, 3, 3);
select 3;
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
select 4;
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
select 5;
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
select 6;
||||
1
1
2
2
3
3
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
7
verify that the statement failed
select * from test;
a	b	c
1	1	1
2	2	2
3	3	3
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
Set the batch size for checking CPU time to 5
set @@GLOBAL.write_time_check_batch=5;
Test 2.1.4: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
select 1;
insert into test values(1, 1, 1);
select 2;
insert into test values(2, 2, 2), (3, 3, 3);
select 3;
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
select 4;
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
select 5;
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
select 6;
insert into test values(16, 16, 16);
select 7;
insert into test values(17, 17, 17);
select 8;
||||
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
show warnings;
Level	Code	Message
Test 2.1.5: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
select 1;
insert into test values(1, 1, 1);
select 2;
insert into test values(2, 2, 2), (3, 3, 3);
select 3;
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
select 4;
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
select 5;
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
select 6;
insert into test values(16, 16, 16);
select 7;
insert into test values(17, 17, 17);
select 8;
||||
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
show warnings;
Level	Code	Message
Reset table test
set @@GLOBAL.write_control_level=OFF;
delete from test;
Test 2.1.6: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
select 1;
insert into test values(1, 1, 1);
select 2;
insert into test values(2, 2, 2), (3, 3, 3);
select 3;
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
select 4;
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
select 5;
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
select 6;
insert into test values(16, 16, 16);
select 7;
insert into test values(17, 17, 17);
select 8;
||||
1
1
2
2
3
3
4
4
5
5
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
8
verify that the statement failed
select * from test;
a	b	c
1	1	1
2	2	2
3	3	3
4	4	4
5	5	5
6	6	6
7	7	7
8	8	8
9	9	9
10	10	10
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
set @@global.debug= '-d,dbug.force_long_running_query';
connect to master
Test 2.2: Update Query - Multi-statement
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
setting dbug.force_long_running_query which will
make the query long running after processing number
of rows determined by write_time_check_batch
set @@global.debug= '+d,dbug.force_long_running_query';
Set the batch size for checking CPU time to 3
set @@GLOBAL.write_time_check_batch=3;
Test 2.2.1: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
select 1;
update test set b=-1 where a <= 1;
select 2;
update test set b=-2 where a <= 2;
select 3;
update test set b=-3 where a <= 3;
select 4;
update test set b=-4 where a = 4;
select 5;
update test set b=-5 where a = 5;
select 6;
||||
1
1
2
2
3
3
4
4
5
5
6
6
show warnings;
Level	Code	Message
Test 2.2.2: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
select 1;
update test set b=-11 where a <= 1;
select 2;
update test set b=-12 where a <= 2;
select 3;
update test set b=-13 where a <= 3;
select 4;
update test set b=-14 where a = 4;
select 5;
update test set b=-15 where a = 5;
select 6;
||||
1
1
2
2
3
3
4
4
5
5
6
6
show warnings;
Level	Code	Message
Test 2.2.3: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
select 1;
update test set b=-91 where a <= 1;
select 2;
update test set b=-22 where a <= 2;
select 3;
update test set b=-23 where a <= 3;
select 4;
update test set b=-24 where a = 4;
select 5;
update test set b=-25 where a = 5;
select 6;
||||
1
1
2
2
3
3
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
9
verify that the statement failed
select * from test;
a	b	c
1	-22	1
2	-22	2
3	-13	3
4	-14	4
5	-15	5
6	6	6
7	7	7
8	8	8
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
Set the batch size for checking CPU time to 5
set @@GLOBAL.write_time_check_batch=5;
Test 2.2.4: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
select 1;
update test set b=-31 where a <= 1;
select 2;
update test set b=-32 where a <= 2;
select 3;
update test set b=-33 where a <= 3;
select 4;
update test set b=-34 where a <= 4;
select 5;
update test set b=-35 where a <= 5;
select 6;
update test set b=-36 where a = 6;
select 7;
update test set b=-37 where a = 7;
select 8;
||||
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
show warnings;
Level	Code	Message
Test 2.2.5: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
select 1;
update test set b=-41 where a <= 1;
select 2;
update test set b=-42 where a <= 2;
select 3;
update test set b=-43 where a <= 3;
select 4;
update test set b=-44 where a <= 4;
select 5;
update test set b=-45 where a <= 5;
select 6;
update test set b=-46 where a = 6;
select 7;
update test set b=-47 where a = 7;
select 8;
||||
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
show warnings;
Level	Code	Message
Test 2.2.6: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
select 1;
update test set b=-51 where a <= 1;
select 2;
update test set b=-52 where a <= 2;
select 3;
update test set b=-53 where a <= 3;
select 4;
update test set b=-54 where a <= 4;
select 5;
update test set b=-55 where a <= 5;
select 6;
update test set b=-56 where a = 6;
select 7;
update test set b=-57 where a = 7;
select 8;
||||
1
1
2
2
3
3
4
4
5
5
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
10
verify that the statement failed
select * from test;
a	b	c
1	-54	1
2	-54	2
3	-54	3
4	-54	4
5	-45	5
6	-46	6
7	-47	7
8	8	8
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
set @@global.debug= '-d,dbug.force_long_running_query';
connect to master
Test 2.3: Delete Query - Multi-statement
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
setting dbug.force_long_running_query which will
make the query long running after processing number
of rows determined by write_time_check_batch
set @@global.debug= '+d,dbug.force_long_running_query';
Set the batch size for checking CPU time to 3
set @@GLOBAL.write_time_check_batch=3;
Test 2.3.1: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
select 1;
delete from test where a = 1;
select 2;
delete from test where a in (2, 3);
select 3;
delete from test where a in (4, 5, 6);
select 4;
delete from test where a in (7, 8, 9);
select 5;
delete from test where a in (10, 11, 12);
select 6;
||||
1
1
2
2
3
3
4
4
5
5
6
6
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 2.3.2: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
select 1;
delete from test where a = 1;
select 2;
delete from test where a in (2, 3);
select 3;
delete from test where a in (4, 5, 6);
select 4;
delete from test where a in (7, 8, 9);
select 5;
delete from test where a in (10, 11, 12);
select 6;
||||
1
1
2
2
3
3
4
4
5
5
6
6
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 2.3.3: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
select 1;
delete from test where a = 1;
select 2;
delete from test where a in (2, 3);
select 3;
delete from test where a in (4, 5, 6);
select 4;
delete from test where a in (7, 8, 9);
select 5;
delete from test where a in (10, 11, 12);
select 6;
||||
1
1
2
2
3
3
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
11
verify that the statement failed
select * from test;
a	b	c
4	4	4
5	5	5
6	6	6
7	7	7
8	8	8
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
Reset table test and insert 30 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
insert into test select a+1, b+1, c+1 from staging;
Set the batch size for checking CPU time to 5
set @@GLOBAL.write_time_check_batch=5;
Test 2.3.4: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
select 1;
delete from test where a = 1;
select 2;
delete from test where a in (2, 3);
select 3;
delete from test where a in (4, 5, 6);
select 4;
delete from test where a in (7, 8, 9, 10);
select 5;
delete from test where a in (11, 12, 13, 14, 15);
select 6;
delete from test where a in (16, 17, 18);
select 7;
delete from test where a in (19, 20, 21, 22);
select 8;
||||
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
show warnings;
Level	Code	Message
Reset table test and insert 30 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
insert into test select a+1, b+1, c+1 from staging;
Test 2.3.5: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
select 1;
delete from test where a = 1;
select 2;
delete from test where a in (2, 3);
select 3;
delete from test where a in (4, 5, 6);
select 4;
delete from test where a in (7, 8, 9, 10);
select 5;
delete from test where a in (11, 12, 13, 14, 15);
select 6;
delete from test where a in (16, 17, 18);
select 7;
delete from test where a in (19, 20, 21, 22);
select 8;
||||
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
show warnings;
Level	Code	Message
Reset table test and insert 30 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 2.3.6: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
select 1;
delete from test where a = 1;
select 2;
delete from test where a in (2, 3);
select 3;
delete from test where a in (4, 5, 6);
select 4;
delete from test where a in (7, 8, 9, 10);
select 5;
delete from test where a in (11, 12, 13, 14, 15);
select 6;
delete from test where a in (16, 17, 18);
select 7;
delete from test where a in (19, 20, 21, 22);
select 8;
||||
1
1
2
2
3
3
4
4
5
5
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
12
verify that the statement failed
select * from test;
a	b	c
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
set @@global.debug= '-d,dbug.force_long_running_query';
connect to master
Test 2.4: Mixed Query - Multi-statement
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
setting dbug.force_long_running_query which will
make the query long running after processing number
of rows determined by write_time_check_batch
set @@global.debug= '+d,dbug.force_long_running_query';
Set the batch size for checking CPU time to 3
set @@GLOBAL.write_time_check_batch=3;
Test 2.4.1: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
select 1;
insert into test values (16, 16, 16);
select 2;
delete from test where a in (2);
select 3;
update test set b=-1 where a in (4, 5, 6);
select 4;
insert into test values (17, 17, 17);
select 5;
delete from test where a >= 10 and a <15;
select 6;
update test set b=-2 where a in (7, 8, 9);
select 7;
insert into test values (18, 18, 18);
select 8;
||||
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 2.4.2: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
select 1;
insert into test values (16, 16, 16);
select 2;
delete from test where a in (2);
select 3;
update test set b=-1 where a in (4, 5, 6);
select 4;
insert into test values (17, 17, 17);
select 5;
delete from test where a >= 10 and a <15;
select 6;
update test set b=-2 where a in (7, 8, 9);
select 7;
insert into test values (18, 18, 18);
select 8;
||||
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 2.4.3: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
select 1;
insert into test values (16, 16, 16);
select 2;
delete from test where a in (2);
select 3;
update test set b=-1 where a in (4, 5, 6);
select 4;
insert into test values (17, 17, 17);
select 5;
delete from test where a >= 10 and a <15;
select 6;
update test set b=-2 where a in (7, 8, 9);
select 7;
insert into test values (18, 18, 18);
select 8;
||||
1
1
2
2
3
3
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
13
verify that the statement failed
select * from test;
a	b	c
1	1	1
3	3	3
4	4	4
5	5	5
6	6	6
7	7	7
8	8	8
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
16	16	16
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Set the batch size for checking CPU time to 5
set @@GLOBAL.write_time_check_batch=5;
Test 2.4.4: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
select 1;
insert into test values (16, 16, 16);
select 2;
delete from test where a in (2);
select 3;
update test set b=-1 where a in (4, 5, 6);
select 4;
insert into test values (17, 17, 17);
select 5;
delete from test where a >= 10 and a <15;
select 6;
update test set b=-2 where a in (7, 8, 9);
select 7;
insert into test values (18, 18, 18);
select 8;
||||
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 2.4.5: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
select 1;
insert into test values (16, 16, 16);
select 2;
delete from test where a in (2);
select 3;
update test set b=-1 where a in (4, 5, 6);
select 4;
insert into test values (17, 17, 17);
select 5;
delete from test where a >= 10 and a <15;
select 6;
update test set b=-2 where a in (7, 8, 9);
select 7;
insert into test values (18, 18, 18);
select 8;
||||
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 2.4.6: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
select 1;
insert into test values (16, 16, 16);
select 2;
delete from test where a in (2);
select 3;
update test set b=-1 where a in (4, 5, 6);
select 4;
insert into test values (17, 17, 17);
select 5;
delete from test where a >= 10 and a <15;
select 6;
update test set b=-2 where a in (7, 8, 9);
select 7;
insert into test values (18, 18, 18);
select 8;
||||
1
1
2
2
3
3
4
4
5
5
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
show errors;
Level	Code	Message
Error	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
14
verify that the statement failed
select * from test;
a	b	c
1	1	1
3	3	3
4	-1	4
5	-1	5
6	-1	6
7	7	7
8	8	8
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
16	16	16
17	17	17
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
set @@global.debug= '-d,dbug.force_long_running_query';
Test 3: Transaction Tests
connect to master
Test 3.1: Insert Query - Multi-statement
setting dbug.force_long_running_query which will
make the query long running after processing number
of rows determined by write_time_check_batch
set @@global.debug= '+d,dbug.force_long_running_query';
Set the batch size for checking CPU time to 3
set @@GLOBAL.write_time_check_batch=3;
Test 3.1.1: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
start transaction;
select 1;
1
1
insert into test values(1, 1, 1);
select 2;
2
2
insert into test values(2, 2, 2), (3, 3, 3);
show warnings;
Level	Code	Message
Note	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 3;
3
3
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
select 4;
4
4
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
select 5;
5
5
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
select 6;
6
6
commit;
Test 3.1.2: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
start transaction;
select 1;
1
1
insert into test values(1, 1, 1);
select 2;
2
2
insert into test values(2, 2, 2), (3, 3, 3);
show warnings;
Level	Code	Message
Warning	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 3;
3
3
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
select 4;
4
4
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
select 5;
5
5
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
select 6;
6
6
commit;
Reset table test
set @@GLOBAL.write_control_level=OFF;
delete from test;
Test 3.1.3: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
start transaction;
select 1;
1
1
insert into test values(1, 1, 1);
select 2;
2
2
insert into test values(2, 2, 2), (3, 3, 3);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 3;
3
3
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 4;
4
4
insert into test values(7, 7, 7), (8, 8, 8);
select 5;
5
5
insert into test values(11, 11, 11);
select 6;
6
6
commit;
show errors;
Level	Code	Message
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
16
verify that the statement failed
select * from test;
a	b	c
7	7	7
8	8	8
11	11	11
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
Set the batch size for checking CPU time to 5
set @@GLOBAL.write_time_check_batch=5;
Test 3.1.4: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
start transaction;
select 1;
1
1
insert into test values(1, 1, 1);
select 2;
2
2
insert into test values(2, 2, 2), (3, 3, 3);
select 3;
3
3
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
show warnings;
Level	Code	Message
Note	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 4;
4
4
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
select 5;
5
5
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
select 6;
6
6
insert into test values(16, 16, 16);
select 7;
7
7
insert into test values(17, 17, 17);
select 8;
8
8
commit;
Test 3.1.5: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
start transaction;
select 1;
1
1
insert into test values(1, 1, 1);
select 2;
2
2
insert into test values(2, 2, 2), (3, 3, 3);
select 3;
3
3
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
show warnings;
Level	Code	Message
Warning	50091	Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 4;
4
4
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
select 5;
5
5
insert into test values(11, 11, 11), (12, 12, 12), (13, 13, 13), (14, 14, 14), (15, 15, 15);
select 6;
6
6
insert into test values(16, 16, 16);
select 7;
7
7
insert into test values(17, 17, 17);
select 8;
8
8
commit;
Reset table test
set @@GLOBAL.write_control_level=OFF;
delete from test;
Test 3.1.6: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
start transaction;
select 1;
1
1
insert into test values(1, 1, 1);
select 2;
2
2
insert into test values(2, 2, 2), (3, 3, 3);
select 3;
3
3
insert into test values(4, 4, 4), (5, 5, 5), (6, 6, 6);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 4;
4
4
insert into test values(7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);
select 5;
5
5
insert into test values(11, 11, 11);
select 6;
6
6
insert into test values(16, 16, 16);
select 7;
7
7
insert into test values(17, 17, 17);
select 8;
8
8
commit;
show errors;
Level	Code	Message
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
17
verify that the statement failed
select * from test;
a	b	c
7	7	7
8	8	8
9	9	9
10	10	10
11	11	11
16	16	16
17	17	17
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
set @@global.debug= '-d,dbug.force_long_running_query';
connect to master
Test 3.2: Update Query - Multi-statement
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
setting dbug.force_long_running_query which will
make the query long running after processing number
of rows determined by write_time_check_batch
set @@global.debug= '+d,dbug.force_long_running_query';
Set the batch size for checking CPU time to 3
set @@GLOBAL.write_time_check_batch=3;
Test 3.2.1: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
start transaction;
select 1;
1
1
update test set b=-1 where a <= 1;
select 2;
2
2
update test set b=-2 where a <= 2;
select 3;
3
3
update test set b=-3 where a <= 3;
select 4;
4
4
update test set b=-4 where a = 4;
select 5;
5
5
update test set b=-5 where a = 5;
select 6;
6
6
commit;
show warnings;
Level	Code	Message
Test 3.2.2: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
start transaction;
select 1;
1
1
update test set b=-11 where a <= 1;
select 2;
2
2
update test set b=-12 where a <= 2;
select 3;
3
3
update test set b=-13 where a <= 3;
select 4;
4
4
update test set b=-14 where a = 4;
select 5;
5
5
update test set b=-15 where a = 5;
select 6;
6
6
commit;
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 3.2.3: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
start transaction;
select 1;
1
1
update test set b=-21 where a <= 1;
select 2;
2
2
update test set b=-22 where a <= 2;
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 3;
3
3
update test set b=-23 where a <= 3;
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 4;
4
4
update test set b=-24 where a = 4;
select 5;
5
5
update test set b=-25 where a = 5;
select 6;
6
6
commit;
show errors;
Level	Code	Message
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
19
verify that the statement failed
select * from test;
a	b	c
1	1	1
2	2	2
3	3	3
4	-24	4
5	-25	5
6	6	6
7	7	7
8	8	8
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
Set the batch size for checking CPU time to 5
set @@GLOBAL.write_time_check_batch=5;
Test 3.2.4: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
start transaction;
select 1;
1
1
update test set b=-31 where a <= 1;
select 2;
2
2
update test set b=-32 where a <= 2;
select 3;
3
3
update test set b=-33 where a <= 3;
select 4;
4
4
update test set b=-34 where a = 4;
select 5;
5
5
update test set b=-35 where a = 5;
select 6;
6
6
update test set b=-36 where a = 6;
select 7;
7
7
commit;
show warnings;
Level	Code	Message
Test 3.2.5: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
start transaction;
select 1;
1
1
update test set b=-41 where a <= 1;
select 2;
2
2
update test set b=-42 where a <= 2;
select 3;
3
3
update test set b=-43 where a <= 3;
select 4;
4
4
update test set b=-44 where a = 4;
select 5;
5
5
update test set b=-45 where a <= 5;
select 6;
6
6
update test set b=-46 where a = 6;
select 7;
7
7
commit;
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 3.2.6: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
start transaction;
select 1;
1
1
update test set b=-51 where a <= 1;
select 2;
2
2
update test set b=-52 where a <= 2;
select 3;
3
3
update test set b=-53 where a <= 3;
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 4;
4
4
update test set b=-54 where a = 4;
select 5;
5
5
update test set b=-55 where a <= 5;
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 6;
6
6
update test set b=-56 where a = 6;
select 7;
7
7
commit;
show errors;
Level	Code	Message
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
21
verify that the statement failed
select * from test;
a	b	c
1	1	1
2	2	2
3	3	3
4	-54	4
5	5	5
6	-56	6
7	7	7
8	8	8
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
set @@global.debug= '-d,dbug.force_long_running_query';
connect to master
Test 3.3: Delete Query - Multi-statement
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
setting dbug.force_long_running_query which will
make the query long running after processing number
of rows determined by write_time_check_batch
set @@global.debug= '+d,dbug.force_long_running_query';
Set the batch size for checking CPU time to 3
set @@GLOBAL.write_time_check_batch=3;
Test 3.3.1: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
start transaction;
select 1;
1
1
delete from test where a = 1;
select 2;
2
2
delete from test where a in (2, 3);
select 3;
3
3
delete from test where a in (4, 5, 6);
select 4;
4
4
delete from test where a in (7, 8);
select 5;
5
5
delete from test where a in (10, 11, 12, 13);
select 6;
6
6
commit;
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 3.3.2: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
start transaction;
select 1;
1
1
delete from test where a = 1;
select 2;
2
2
delete from test where a in (2, 3);
select 3;
3
3
delete from test where a in (4, 5, 6);
select 4;
4
4
delete from test where a in (7, 8);
select 5;
5
5
delete from test where a in (10, 11, 12, 13);
select 6;
6
6
commit;
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 3.3.3: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
start transaction;
select 1;
1
1
delete from test where a = 1;
select 2;
2
2
delete from test where a in (2, 3);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 3;
3
3
delete from test where a in (4, 5, 6);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 4;
4
4
delete from test where a in (7, 8);
select 5;
5
5
delete from test where a in (10, 11, 12, 13);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 6;
6
6
commit;
show errors;
Level	Code	Message
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
24
verify that the statement failed
select * from test;
a	b	c
1	1	1
2	2	2
3	3	3
4	4	4
5	5	5
6	6	6
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Set the batch size for checking CPU time to 5
set @@GLOBAL.write_time_check_batch=5;
Test 3.3.4: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
start transaction;
select 1;
1
1
delete from test where a = 1;
select 2;
2
2
delete from test where a in (2, 3);
select 3;
3
3
delete from test where a in (4, 5, 6);
select 4;
4
4
delete from test where a in (7, 8, 9, 10);
select 5;
5
5
delete from test where a in (11, 12, 13, 14, 15);
select 6;
6
6
commit;
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 3.3.5: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
start transaction;
select 1;
1
1
delete from test where a = 1;
select 2;
2
2
delete from test where a in (2, 3);
select 3;
3
3
delete from test where a in (4, 5, 6);
select 4;
4
4
delete from test where a in (7, 8, 9, 10);
select 5;
5
5
delete from test where a in (11, 12, 13, 14, 15);
select 6;
6
6
commit;
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 3.3.6: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
start transaction;
select 1;
1
1
delete from test where a = 1;
select 2;
2
2
delete from test where a in (2, 3);
select 3;
3
3
delete from test where a in (4, 5, 6);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 4;
4
4
delete from test where a in (7, 8, 9, 10);
select 5;
5
5
delete from test where a in (11, 12, 13, 14, 15);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 6;
6
6
commit;
show errors;
Level	Code	Message
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
26
verify that the statement failed
select * from test;
a	b	c
1	1	1
2	2	2
3	3	3
4	4	4
5	5	5
6	6	6
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
set @@global.debug= '-d,dbug.force_long_running_query';
connect to master
Test 3.4: Mixed Query - Multi-statement
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
setting dbug.force_long_running_query which will
make the query long running after processing number
of rows determined by write_time_check_batch
set @@global.debug= '+d,dbug.force_long_running_query';
Set the batch size for checking CPU time to 3
set @@GLOBAL.write_time_check_batch=3;
Test 3.4.1: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
start transaction;
select 1;
1
1
insert into test values (16, 16, 16);
select 2;
2
2
delete from test where a in (2);
select 3;
3
3
update test set b=-1 where a in (4, 5);
select 4;
4
4
insert into test values (17, 17, 17);
select 5;
5
5
delete from test where a in (3);
select 6;
6
6
update test set b=-1 where a in (7, 8, 9);
select 7;
7
7
commit;
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 3.4.2: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
start transaction;
select 1;
1
1
insert into test values (16, 16, 16);
select 2;
2
2
delete from test where a in (2);
select 3;
3
3
update test set b=-1 where a in (4, 5);
select 4;
4
4
insert into test values (17, 17, 17);
select 5;
5
5
delete from test where a in (3);
select 6;
6
6
update test set b=-1 where a in (7, 8, 9);
select 7;
7
7
commit;
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 3.4.3: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
start transaction;
select 1;
1
1
insert into test values (16, 16, 16);
select 2;
2
2
delete from test where a in (2);
select 3;
3
3
update test set b=-1 where a in (4, 5);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 4;
4
4
insert into test values (17, 17, 17);
select 5;
5
5
delete from test where a in (3);
select 6;
6
6
update test set b=-1 where a in (7, 8, 9);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 7;
7
7
commit;
show errors;
Level	Code	Message
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
28
verify that the statement failed
select * from test;
a	b	c
1	1	1
2	2	2
4	4	4
5	5	5
6	6	6
7	7	7
8	8	8
9	9	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
17	17	17
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Set the batch size for checking CPU time to 5
set @@GLOBAL.write_time_check_batch=5;
Test 3.4.4: Raise warning as note
set @@GLOBAL.write_control_level=NOTE;
this query raises warning
start transaction;
select 1;
1
1
insert into test values (16, 16, 16);
select 2;
2
2
delete from test where a in (2);
select 3;
3
3
update test set b=-1 where a in (4, 5);
select 4;
4
4
insert into test values (17, 17, 17);
select 5;
5
5
delete from test where a in (3);
select 6;
6
6
update test set b=-1 where a in (7, 8, 9);
select 7;
7
7
commit;
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 3.4.5: Raise warning
set @@GLOBAL.write_control_level=WARN;
this query raises warning
start transaction;
select 1;
1
1
insert into test values (16, 16, 16);
select 2;
2
2
delete from test where a in (2);
select 3;
3
3
update test set b=-1 where a in (4, 5);
select 4;
4
4
insert into test values (17, 17, 17);
select 5;
5
5
delete from test where a in (3);
select 6;
6
6
update test set b=-1 where a in (7, 8, 9);
select 7;
7
7
commit;
show warnings;
Level	Code	Message
Reset table test and insert 15 rows
set @@GLOBAL.write_control_level=OFF;
delete from test;
insert into test select * from staging;
Test 3.4.6: Raise error
set @@GLOBAL.write_control_level=ERROR;
truncate table performance_schema.events_errors_summary_global_by_error;
this query fails with an error
start transaction;
select 1;
1
1
insert into test values (16, 16, 16);
select 2;
2
2
delete from test where a in (2);
select 3;
3
3
update test set b=-1 where a in (4, 5);
select 4;
4
4
insert into test values (17, 17, 17);
ERROR HY000: Write CPU time exceeded (controlled by write_cpu_limit_milliseconds)
select 5;
5
5
delete from test where a in (3);
select 6;
6
6
update test set b=-1 where a in (7, 8, 9);
select 7;
7
7
commit;
show errors;
Level	Code	Message
select sum(count)
from performance_schema.write_throttling_log
where transaction_type='LONG';
sum(count)
29
verify that the statement failed
select * from test;
a	b	c
1	1	1
2	2	2
4	4	4
5	5	5
6	6	6
7	-1	7
8	-1	8
9	-1	9
10	10	10
11	11	11
12	12	12
13	13	13
14	14	14
15	15	15
select count(*)
from performance_schema.events_errors_summary_global_by_error
where error_name='er_warn_write_exceeded_cpu_limit_milliseconds'
  and first_seen is not NULL and last_seen is not NULL ;
count(*)
1
set @@global.debug= '-d,dbug.force_long_running_query';
set @@GLOBAL.write_control_level=OFF;
set @@GLOBAL.write_cpu_limit_milliseconds=0;
set @@GLOBAL.write_time_check_batch=0;
drop table test;
drop table staging;
include/rpl_end.inc
