Case 1: Write stats are not collected by default since the feature is turned off.
SELECT @@WRITE_STATS_COUNT;
@@WRITE_STATS_COUNT
0
SELECT @@WRITE_STATS_FREQUENCY;
@@WRITE_STATS_FREQUENCY
0
select count(*) from performance_schema.write_statistics;
count(*)
0
Case 2: Write stats are not collected if WRITE_STATS_COUNT is 0.
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_STATS_FREQUENCY=1;
SELECT @@WRITE_STATS_COUNT;
@@WRITE_STATS_COUNT
0
SELECT @@WRITE_STATS_FREQUENCY;
@@WRITE_STATS_FREQUENCY
1
select count(*) from performance_schema.write_statistics;
count(*)
0
Case 3: Write stats are not collected if WRITE_STATS_FREQUENCY is 0.
SET @@GLOBAL.WRITE_STATS_FREQUENCY=0;
SET @@GLOBAL.WRITE_STATS_COUNT=2;
SELECT @@WRITE_STATS_COUNT;
@@WRITE_STATS_COUNT
2
SELECT @@WRITE_STATS_FREQUENCY;
@@WRITE_STATS_FREQUENCY
0
select count(*) from performance_schema.write_statistics;
count(*)
0
reset 
SET @@GLOBAL.WRITE_STATS_COUNT=0;
Case 4: Write stats are collected for stmts that write to binary log but not for read stmts
SET @@GLOBAL.WRITE_STATS_FREQUENCY=10000;
SET @@GLOBAL.WRITE_STATS_COUNT=2;
SELECT @@WRITE_STATS_COUNT;
@@WRITE_STATS_COUNT
2
SELECT @@WRITE_STATS_FREQUENCY;
@@WRITE_STATS_FREQUENCY
10000
select count(*) from performance_schema.write_statistics;
count(*)
0
Create table t(id int not null) ENGINE=InnoDB;
insert into t values(1);
This should have inserted 4 rows, 1 row per dimension into write_statistics 
select type, count(*) from performance_schema.write_statistics group by type;
type	count(*)
USER	1
CLIENT	1
SHARD	1
SQL_ID	1
Doing another insert should add metrics to the existing rows
select max(write_data_bytes) from performance_schema.write_statistics into @bbw;
insert into t values(2);
select type, count(*) from performance_schema.write_statistics where write_data_bytes > @bbw group by type;
type	count(*)
USER	1
CLIENT	1
SHARD	1
SQL_ID	1
Update & Delete statements should insert one new row each for new sql ids
update t set id = 3 where id = 1;
delete from t where id in (2, 3);
select type, count(*) from performance_schema.write_statistics group by type;
type	count(*)
USER	1
CLIENT	1
SHARD	1
SQL_ID	3
Select statements should add anything to write_statistics
select id from t;
id
select type, count(*) from performance_schema.write_statistics group by type;
type	count(*)
USER	1
CLIENT	1
SHARD	1
SQL_ID	3
reset 
TRUNCATE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
Case 5: Write stats are collected for each sql_id in a transaction
SET @@GLOBAL.WRITE_STATS_FREQUENCY=10000;
SET @@GLOBAL.WRITE_STATS_COUNT=2;
select type, count(*) from performance_schema.write_statistics group by type;
type	count(*)
START TRANSACTION;
insert into t values(1);
update t set id = 2 where id = 1;
update t set id = 3 where id = 2;
delete from t where id = 3;
COMMIT;
select type, count(*) from performance_schema.write_statistics group by type;
type	count(*)
USER	1
CLIENT	1
SHARD	1
SQL_ID	3
reset 
TRUNCATE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
Case 6: Only upto WRITE_STATS_COUNT most recent data point are collected
SET @@GLOBAL.WRITE_STATS_FREQUENCY=1;
SET @@GLOBAL.WRITE_STATS_COUNT=2;
select type, count(*) from performance_schema.write_statistics group by type;
type	count(*)
insert into t values(1);
select sleep(1);
sleep(1)
0
select max(timestamp) from performance_schema.write_statistics into @ts;
insert into t values(2);
select sleep(1);
sleep(1)
0
insert into t values(3);
select sleep(1);
sleep(1)
0
insert into t values(4);
select count(distinct timestamp) from performance_schema.write_statistics;
count(distinct timestamp)
2
select min(timestamp) > @ts as must_be_1 from performance_schema.write_statistics;
must_be_1
1
reset 
TRUNCATE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
Case 6.5: CPU write time test
Insert 2000 rows into t
CREATE PROCEDURE bulkInsert()
BEGIN
DECLARE v1 INT DEFAULT 2000;
WHILE v1 > 0 DO
INSERT INTO t VALUES(1);
SET v1 = v1 - 1;
END WHILE;
END//
Call bulkInsert();
SET @@GLOBAL.WRITE_STATS_FREQUENCY=10000;
SET @@GLOBAL.WRITE_STATS_COUNT=2;
select type, count(*) from performance_schema.write_statistics group by type;
type	count(*)
long running update, insert and delete
insert into t (select * from t limit 2000);
update t set id = 2 where id = 1;
delete from t where id = 2;
select count(*) from performance_schema.write_statistics where cpu_write_time_ms > 0 and type = 'sql_id';
count(*)
3
reset 
DROP PROCEDURE bulkInsert;
TRUNCATE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
Case 6.6: Dynamically change write_stats_count
SET @@GLOBAL.WRITE_STATS_FREQUENCY=1;
SET @@GLOBAL.WRITE_STATS_COUNT=1;
insert into t values(1);
select sleep(1);
sleep(1)
0
insert into t values(1);
select sleep(1);
sleep(1)
0
select count(distinct timestamp) = 1 as must_be_true from performance_schema.write_statistics;
must_be_true
1
SET @@GLOBAL.WRITE_STATS_COUNT=2;
insert into t values(1);
select sleep(1);
sleep(1)
0
select count(distinct timestamp) = 2 as must_be_true from performance_schema.write_statistics;
must_be_true
1
SET @@GLOBAL.WRITE_STATS_COUNT=1;
insert into t values(1);
select count(distinct timestamp) = 1 as must_be_true from performance_schema.write_statistics;
must_be_true
1
reset 
TRUNCATE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
Case 7: Stats for multiple users are stored
SET @@GLOBAL.WRITE_STATS_FREQUENCY=10000;
SET @@GLOBAL.WRITE_STATS_COUNT=2;
select type, count(*) from performance_schema.write_statistics group by type;
type	count(*)
insert into t values(1);
create user user_super1@localhost identified by 'su1';
grant all on *.* to user_super1@localhost with grant option;
insert into t values(2);
select type, count(*) from performance_schema.write_statistics group by type;
type	count(*)
USER	2
CLIENT	1
SHARD	1
SQL_ID	1
reset 
TRUNCATE t;
drop user user_super1@localhost;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
Case 8: Manual Throttling - SQL_ID 
SET @@GLOBAL.WRITE_STATS_FREQUENCY=10000;
SET @@GLOBAL.WRITE_STATS_COUNT=2;
insert into t values(1);
select value from performance_schema.write_statistics where type = 'SQL_ID' into @sql_id;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS=CONCAT('+SQL_ID=', @sql_id);
select mode, value from performance_schema.write_throttling_rules where type = 'SQL_ID';
mode	value
MANUAL	1df4de2a8dd27d161264765258e6603b64e3c91210f21de1c8dfea72966479b3
Should throttle insert queries
insert into t values(1);
ERROR HY000: Exceeded write workload limit. Try again later
insert into t values(1);
ERROR HY000: Exceeded write workload limit. Try again later
select transaction_type, count from performance_schema.write_throttling_log where type = 'SQL_ID' and mode = 'MANUAL';
transaction_type	count
SHORT	2
Other queries should not be throttled
update t set id = 2 where id = 1;
delete from t where id = 2;
Stop throttling, query should be successful
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS=CONCAT('-SQL_ID=', @sql_id);
insert into t values(1);
select * from t;
id
1
reset 
TRUNCATE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
Case 9: Manual Throttling - CLIENT 
SET @@GLOBAL.WRITE_STATS_FREQUENCY=10000;
SET @@GLOBAL.WRITE_STATS_COUNT=2;
insert into t values(1);
select value from performance_schema.write_statistics where type = 'CLIENT' into @client;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS=CONCAT('+CLIENT=', @client);
select mode, value from performance_schema.write_throttling_rules where type = 'CLIENT';
mode	value
MANUAL	99914b932bd37a50b983c5e7c90ae93b
Should throttle insert queries
insert into t values(1);
ERROR HY000: Exceeded write workload limit. Try again later
insert into t values(1);
ERROR HY000: Exceeded write workload limit. Try again later
select transaction_type, count from performance_schema.write_throttling_log where type = 'CLIENT' and mode = 'MANUAL';
transaction_type	count
SHORT	2
All write queries from this client should be throttled
update t set id = 2 where id = 1;
ERROR HY000: Exceeded write workload limit. Try again later
delete from t where id = 2;
ERROR HY000: Exceeded write workload limit. Try again later
select transaction_type, count from performance_schema.write_throttling_log where type = 'CLIENT' and mode = 'MANUAL';
transaction_type	count
SHORT	4
All read queries from this client should be fine
select count(*) from t;
count(*)
1
Stop throttling, query should be successful
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS=CONCAT('-CLIENT=', @client);
update t set id = 2 where id = 1;
delete from t where id = 2;
insert into t values(1);
select * from t;
id
1
reset 
TRUNCATE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
Case 10: Manual Throttling - SHARD 
SET @@GLOBAL.WRITE_STATS_FREQUENCY=10000;
SET @@GLOBAL.WRITE_STATS_COUNT=2;
insert into t values(1);
select value from performance_schema.write_statistics where type = 'SHARD' into @shard;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS=CONCAT('+SHARD=', @shard);
select mode, value from performance_schema.write_throttling_rules where type = 'SHARD';
mode	value
MANUAL	test
Should throttle insert queries
insert into t values(1);
ERROR HY000: Exceeded write workload limit. Try again later
insert into t values(1);
ERROR HY000: Exceeded write workload limit. Try again later
select transaction_type, count from performance_schema.write_throttling_log where type = 'SHARD' and mode = 'MANUAL';
transaction_type	count
SHORT	2
All write queries to this shard should be throttled
update t set id = 2 where id = 1;
ERROR HY000: Exceeded write workload limit. Try again later
delete from t where id = 2;
ERROR HY000: Exceeded write workload limit. Try again later
select transaction_type, count from performance_schema.write_throttling_log where type = 'SHARD' and mode = 'MANUAL';
transaction_type	count
SHORT	4
All read queries to this shard should be fine
select count(*) from t;
count(*)
1
Stop throttling, query should be successful
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS=CONCAT('-SHARD=', @shard);
update t set id = 2 where id = 1;
delete from t where id = 2;
insert into t values(1);
select * from t;
id
1
reset 
TRUNCATE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
Case 11: Manual Throttling - USER 
SET @@GLOBAL.WRITE_STATS_FREQUENCY=10000;
SET @@GLOBAL.WRITE_STATS_COUNT=2;
insert into t values(1);
select value from performance_schema.write_statistics where type = 'USER' into @user;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS=CONCAT('+USER=', @user);
select mode, value from performance_schema.write_throttling_rules where type = 'USER';
mode	value
MANUAL	root
Should throttle insert queries
insert into t values(1);
ERROR HY000: Exceeded write workload limit. Try again later
insert into t values(1);
ERROR HY000: Exceeded write workload limit. Try again later
select transaction_type, count from performance_schema.write_throttling_log where type = 'USER' and mode = 'MANUAL';
transaction_type	count
SHORT	2
All write queries from this user should be throttled
update t set id = 2 where id = 1;
ERROR HY000: Exceeded write workload limit. Try again later
delete from t where id = 2;
ERROR HY000: Exceeded write workload limit. Try again later
select transaction_type, count from performance_schema.write_throttling_log where type = 'USER' and mode = 'MANUAL';
transaction_type	count
SHORT	4
All read queries from this user should be fine
select count(*) from t;
count(*)
1
other users should be able to run write queries
create user user_super1@localhost identified by 'su1';
grant all on *.* to user_super1@localhost with grant option;
insert into t values(2);
select * from t;
id
1
2
delete from t where id = 2;
Stop throttling, query should be successful
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS=CONCAT('-USER=', @user);
update t set id = 2 where id = 1;
delete from t where id = 2;
insert into t values(1);
select * from t;
id
1
reset 
TRUNCATE t;
drop user user_super1@localhost;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
Cleanup
DROP TABLE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_STATS_FREQUENCY=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
