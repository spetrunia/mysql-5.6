show variables like 'rocksdb_use_range_locking';
Variable_name	Value
rocksdb_use_range_locking	ON
create table t1 (
pk int primary key,
a int
) engine=rocksdb;
insert into t1 values
(10,10),(20,20),(30,30);
connect  con1,localhost,root,,;
connect  con2,localhost,root,,;
### Test: check that range lock inhibits a point lock
connection con1;
begin;
select * from t1 where pk between 5 and 25 for update;
pk	a
10	10
20	20
connection con2;
insert into t1 values (15,15);
ERROR HY000: Lock wait timeout exceeded; try restarting transaction: Timeout on index: test.t1.PRIMARY
connection con1;
rollback;
## Test: check that range lock inhibits another range lock
##  (It should not, but currently it does)
connection con1;
begin;
select * from t1 where pk between 5 and 25 for update;
pk	a
10	10
20	20
connection con2;
begin;
select * from t1 where pk between 15 and 35 for update;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction: Timeout on index: test.t1.PRIMARY
rollback;
connection con1;
rollback;
## Test: check that regular read does not get a range lock
connection con1;
begin;
select * from t1 where pk between 5 and 25;
pk	a
10	10
20	20
connection con2;
begin;
select * from t1 where pk between 15 and 35 for update;
pk	a
20	20
30	30
rollback;
connection con1;
rollback;
## Test that locks are not released when a statement in the transaction
create table t2 (
pk int primary key,
a int,
unique key(a)
) engine=rocksdb;
insert into t2 values (1,1),(2,2);
begin;
insert into t2 values (3,3);
insert into t2 values (10,2);
ERROR 23000: Duplicate entry '2' for key 'a'
connection con2;
begin;
select * from t2 where pk=3 for update;
ERROR HY000: Lock wait timeout exceeded; try restarting transaction: Timeout on index: test.t2.PRIMARY
rollback;
connection con1;
rollback;
drop table t2;
connection default;
disconnect con1;
disconnect con2;
drop table t1;
