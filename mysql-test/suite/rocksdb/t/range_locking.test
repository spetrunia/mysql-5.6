#
#  Range locking tests.
#

--source include/have_rocksdb.inc
--source suite/rocksdb/include/have_range_locking.inc

--enable_connect_log


show variables like 'rocksdb_use_range_locking';

# Test 1: see that ranges are indeed lockied.

create table t1 (
  pk int primary key,
  a int
) engine=rocksdb;

insert into t1 values
(10,10),(20,20),(30,30);

connect (con1,localhost,root,,);
connect (con2,localhost,root,,);

--echo ### Test: check that range lock inhibits a point lock
connection con1;
begin;
select * from t1 where pk between 5 and 25 for update;

connection con2;
--error ER_LOCK_WAIT_TIMEOUT
insert into t1 values (15,15);

connection con1;
rollback;

--echo ## Test: check that range lock inhibits another range lock
--echo ##  (It should not, but currently it does)
connection con1;
begin;
select * from t1 where pk between 5 and 25 for update;

connection con2;
begin;
--error ER_LOCK_WAIT_TIMEOUT
select * from t1 where pk between 15 and 35 for update;
rollback;

connection con1;
rollback;

--echo ## Test: check that regular read does not get a range lock
connection con1;
begin;
select * from t1 where pk between 5 and 25;

connection con2;
begin;
# This must not block
select * from t1 where pk between 15 and 35 for update;
rollback;

connection con1;
rollback;

--echo ## Test that locks are not released when a statement in the transaction
create table t2 (
  pk int primary key,
  a int,
  unique key(a)
) engine=rocksdb;

insert into t2 values (1,1),(2,2);

begin;
insert into t2 values (3,3);
--error ER_DUP_ENTRY
insert into t2 values (10,2);

connection con2;
begin;
# This must time out:
--error ER_LOCK_WAIT_TIMEOUT
select * from t2 where pk=3 for update;

rollback;
connection con1;
rollback;
drop table t2;

# Cleanup
connection default;
disconnect con1;
disconnect con2;
drop table t1;

--echo #
--echo # Test INFORMATION_SCHEMA.lock_info in range-locking mode
--echo #
create table t1 (
  pk int primary key,
  a int
) engine=rocksdb;

insert into t1 values
(10,10),(20,20),(30,30);

begin;
select * from t1 where pk=10 for update;

select * from information_schema.rocksdb_locks;

delete from t1 where pk between 25 and 40;
select * from information_schema.rocksdb_locks;

rollback;
begin;
--echo # The following will show a range lock on 2-9 and also a point lock on 10.
--echo # This is how things currently work.
select * from t1 where pk between 2 and 9 for update;
select * from information_schema.rocksdb_locks;
rollback;

drop table t1;

--echo #
--echo # MDEV-18104: MyRocks-Gap-Lock: range locking bounds are incorrect for multi-part keys
--echo #

create table t0(a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (
  kp1 int not null,
  kp2 int not null,
  a int,
  primary key(kp1, kp2)
) engine=rocksdb;

insert into t1 select 1, a, 1234 from t0;
insert into t1 select 2, a, 1234 from t0;
insert into t1 select 3, a, 1234 from t0;

connect (con1,localhost,root,,);
connection con1;

begin;
select * from t1 where kp1=2 for update;

connection default;
--echo # The lock on kp1=2 should inhibit the following INSERT:
--error ER_LOCK_WAIT_TIMEOUT
insert into t1 values ( 2,5,9999); 
rollback;

connection con1;
rollback;
connection default;
disconnect con1;

drop table t0,t1;

--echo #
--echo # Transaction isolation test
--echo #

create table t1 (pk int primary key, a int) engine=rocksdb;
insert into t1 values (1,1),(2,2),(3,3);

connect (con1,localhost,root,,);

--echo # TRX1: Start, Allocate a snapshot
connection con1;
begin;
select * from t1;

--echo # TRX2: Make a change that TRX1 will not see
connection default;
update t1 set a=2222 where pk=2;

--echo # TRX1: Now, make a change that would overwrite TRX2'x change and commit
connection con1;
update t1 set a=a+1 where pk=2;
commit;

--echo # Examine the result:
--echo #   pk=2, a=2223 means UPDATE in TRX1 used "read committed" (InnoDB-like isolation)
--echo #   pk=2, a=3 means UPDATE in TRX1 silently overwrote TRX2
--echo #   (and with key tracking, one would get an error on the second UPDATE)
connection default;
select * from t1;

disconnect con1;
connection default;
drop table t1;

--echo #
--echo # Same test as above, but check the range scan
--echo #

create table t1 (pk int primary key, a int) engine=rocksdb;
insert into t1 values (1,1),(2,2),(3,3),(4,4),(5,5),(6,6);

connect (con1,localhost,root,,);

--echo # TRX1: Start, Allocate a snapshot
connection con1;
begin;
select * from t1;

--echo # TRX2: Make a change that TRX1 will not see
connection default;
update t1 set a=2222 where pk between 3 and 5;

--echo # TRX1: Now, make a change that would overwrite TRX2'x change and commit
connection con1;
update t1 set a=a+1 where pk between 3 and 5;
commit;

--echo # Examine the result:
--echo #   pk={3,4,5} a=2223 means UPDATE in TRX1 used "read committed" (InnoDB-like isolation)
connection default;
select * from t1;

disconnect con1;
connection default;
drop table t1;

--echo #
--echo # Same as above, but test SELECT FOR UPDATE.
--echo #
create table t1 (pk int primary key, a int) engine=rocksdb;
insert into t1 values (1,1),(2,2),(3,3),(4,4),(5,5),(6,6);

connect (con1,localhost,root,,);

--echo # TRX1: Start, Allocate a snapshot
connection con1;
begin;
select * from t1;

--echo # TRX2: Make a change that TRX1 will not see
connection default;
update t1 set a=222 where pk=2;
update t1 set a=333 where pk=3;

--echo # TRX1: Check what select [FOR UPDATE] sees
connection con1;
select * from t1 where pk in (2,3);
select * from t1 where pk=2 for update;
select * from t1 where pk=2;

commit;

disconnect con1;
connection default;
drop table t1;

--echo #
--echo # Another no-snapshot-checking test, this time for single-statement
--echo # transaction
--echo #

create table t1 (pk int primary key, a int, name varchar(16)) engine=rocksdb;
insert into t1 values (1,1, 'row1'), (2,2,'row2');

connect (con1,localhost,root,,);
connection con1;
select get_lock('row1', 100);

connection default;

--echo # The following will read the first row (1,1,'row1'), and stop.

send update t1 set a=a+100 where get_lock(name, 1000)=1;

# Wait till the default connection has stopped:
connection con1;

let $wait_condition=
  SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE = "User lock"
  AND INFO = "update t1 set a=a+100 where get_lock(name, 1000)=1";
--source include/wait_condition.inc

# Update the second row
update t1 set a=5 where pk=2;

select release_lock('row1');

connection default;
reap;

--echo # Look at the row with pk=2:
--echo #  2, 105, row2 - means the UPDATE was reading current data (Correct)
--echo #  2, 102, row - means the UPDATE read the snapshot (incorrect)
select * from t1;

--echo # Try releasing both locks (in 5.6, we will be holding only the second one)
select release_lock(name) from t1;

disconnect con1;
connection default;
drop table t1;


--echo #
--echo # Check that I_S.processlist.state is set correctly now.
--echo #
create table t1(pk int primary key, a int) engine=rocksdb;
insert into t1 values (1,1),(2,2),(3,3);

begin;
select * from t1 where pk=2 for update;

--connect (con1,localhost,root,,)
begin;
set rocksdb_lock_wait_timeout=300;
send select * from t1 where pk=2 for update;

connection default;
--echo # Now, will wait until we see con1 have state="Waiting for row lock"
let $wait_condition=
  SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE = "Waiting for row lock"
  AND INFO = "select * from t1 where pk=2 for update";
--source include/wait_condition.inc

rollback;
connection con1;
--reap
rollback;

disconnect con1;
connection default;
drop table t1;
