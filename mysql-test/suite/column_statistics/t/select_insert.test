--disable_warnings
DROP TABLE IF EXISTS tbl1;
DROP TABLE IF EXISTS tbl2;
DROP DATABASE IF EXISTS cus_test;
CREATE DATABASE cus_test;
USE cus_test;
--enable_warnings

CREATE TABLE tbl1 (
  col1_1 INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  col1_2 INT(6) NOT NULL,
  col1_3 INT(6) NOT NULL,
  col1_4 INT(6) NOT NULL);

INSERT INTO tbl1 (col1_2, col1_3, col1_4) VALUES (2, 3, 4);
INSERT INTO tbl1 (col1_2, col1_3, col1_4) VALUES (3, 4, 5);
INSERT INTO tbl1 (col1_2, col1_3, col1_4) VALUES (4, 5, 6);

CREATE TABLE tbl2 (col2_1 INT(6) NOT NULL, col2_2 INT(6) NOT NULL);

CREATE TABLE tbl3 (
  col1_1 INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  col1_2 INT(6) NOT NULL,
  col3_3 INT(6) NOT NULL);

INSERT INTO tbl3 (col1_2, col3_3) VALUES (2, 83);
INSERT INTO tbl3 (col1_2, col3_3) VALUES (3, 84);
INSERT INTO tbl3 (col1_2, col3_3) VALUES (4, 85);

set global column_stats_control = ON;

# Executing queries that would populate column_statistics

INSERT INTO tbl2 (col2_1, col2_2)
  SELECT col1_3, col1_4
  FROM tbl1 WHERE col1_2 <= 100 AND col1_3 IN (1, 2, 3, 4, 5, 6);

INSERT INTO tbl2 (col2_1, col2_2)
  SELECT col1_3, col3_3
  FROM tbl1 INNER JOIN tbl3 USING (col1_1) WHERE tbl1.col1_2 <= 100;

# Verification of stats accumulated

SELECT COUNT(DISTINCT SQL_ID) FROM performance_schema.column_statistics;

SORTED_RESULT;
SELECT SQL_ID, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, SQL_OPERATION, OPERATOR_TYPE
FROM performance_schema.column_statistics;

set global column_stats_control = OFF_HARD;

DROP TABLE tbl1;
DROP TABLE tbl2;
DROP TABLE tbl3;
DROP DATABASE cus_test;
